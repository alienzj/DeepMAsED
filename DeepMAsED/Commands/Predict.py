from __future__ import print_function
from pkg_resources import resource_filename
# import
## batteries
import os
import sys
import argparse
import logging
## application
from DeepMAsED import Predict

# functions
def get_desc():
    desc = 'Predict values'
    return desc

def parse_args(test_args=None, subparsers=None):
    desc = get_desc()
    epi = """DESCRIPTION:
    Predicting misassemblies with a model generated by `DeepMAsED train`.

    All feature tables must be labeled either "features.tsv" or "features.tsv.gz"
    (or "features.pkl" if already processed).

    Currently, the "data_path" must point to a directory structure that looks like
    the following: 

      data_path
          |- 1
          |  |-- assembler1
          |  |    |_ features.tsv.gz
          |  |-- assembler2
          |  |     |_ features.tsv.gz
          |  |-- assemblerN
          |       |_ features.tsv.gz
          |- 2
          |  |-- assembler1
          |  |    |_ features.tsv.gz
          |  |-- assembler2
          |  |     |_ features.tsv.gz
          |  |-- assemblerN
          |       |_ features.tsv.gz
          |- N
             |-- assembler1
             |    |_ features.tsv.gz
             |-- assembler2
             |     |_ features.tsv.gz
             |-- assemblerN
                  |_ features.tsv.gz

    ...where the path is ./data_path/simulation_replicate/assembler/feature_table

    If you are running Predict on non-simulation contigs, then just use "1"
    for simulation_replicate.

    Note: we are planning on changing this to a more generalized format in the near future.
    """
    if subparsers:
        parser = subparsers.add_parser('predict', description=desc, epilog=epi,
                                       formatter_class=argparse.RawTextHelpFormatter)
    else:
        parser = argparse.ArgumentParser(description=desc, epilog=epi,
                                         formatter_class=argparse.RawTextHelpFormatter)
    #default trained model
    pkg_model = resource_filename('DeepMAsED','Model/deepmased_model.h5')
    pkg_mstd = resource_filename('DeepMAsED','Model/deepmased_mean_std.pkl')
    pkg_path, pkg_model = os.path.split(pkg_model)
    _, pkg_mstd  = os.path.split(pkg_mstd)
    # args
    parser.add_argument('data_path', metavar='data-path', type=str, 
                        help='Where to find feature table(s) (base directory for all tables)')
    parser.add_argument('--model-path',  default=pkg_path, type=str, 
                        help='Directory containing the model (default: %(default)s)')
    parser.add_argument('--model-name', default=pkg_model, type=str, 
                        help='Model name in the model_path (default: %(default)s)')
    parser.add_argument('--mstd-name', default=pkg_mstd, type=str, 
                        help='Data mean and std name in the model_path (default: %(default)s)') 
    parser.add_argument('--save-path', default='.', type=str, 
                        help='Directory where to save output (default: %(default)s)')
    parser.add_argument('--save-name', default='deepmased', type=str, 
                        help='Prefix for name in the save_path (default: %(default)s)')        
    parser.add_argument('--cpu-only', action='store_true', default=False,
                        help='Only use CPUs, and no GPUs (default: %(default)s)')
    parser.add_argument('--force-overwrite', action='store_true', default=False,
                        help='Force re-creation of pickle files (default: %(default)s)')
    
    # test args
    if test_args:
        args = parser.parse_args(test_args)
        return args

    return parser

def main(args=None):
    logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.DEBUG)
    # Input
    if args is None:
        args = parse_args()
        print()
        print (args)
        print()
    # Main interface
    Predict.main(args)
    
# main
if __name__ == '__main__':
    pass


