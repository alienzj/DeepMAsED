if not skipped(config['params']['MGSIM']['genome_download']):
    localrules: MGSIM_genome_download    
    rule MGSIM_genome_download:
        """
        Using MGSIM to download the genomes
        """
        input:
            tbl = config['genomes_file']
        output:
            tbl = genomes_dir + 'genomes.tsv'
        params:
            params = config['params']['MGSIM']['genome_download'],
            outdir = config['tmp_dir'] + 'ref_genomes'
        resources:
            tries = lambda wildcards, attempt: attempt ** 2 + 3
        conda:
            '../envs/MGSIM.yaml'
        threads:
            1
        log:
            log_dir + 'MGSIM_genome_download.log'
        benchmark:
            benchmark_dir + 'MGSIM_genome_download.txt'
        shell:
            """
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR 2>> {log}

            MGSIM genome_download {params.params} \
              -n {threads} -t {resources.tries} \
              -d $OUTDIR -r {input.tbl} > {output.tbl} 2>> {log}
            """

else:
    rule MGSIM_genome_rename:
        """
        Renaming genome fasta file names & sequence headers
        """
        input:
            tbl = config['genomes_file'],
            fna = config['genomes_tbl']['Fasta']
        output:
            tbl = genomes_dir + 'genomes.tsv'
        params:
            exe = config['pipeline']['script_folder'] + 'rename_genomes.py',
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        log:
            log_dir + 'MGSIM_genome_rename.log'
        benchmark:
            benchmark_dir + 'MGSIM_genome_rename.txt'
        shell:
            """
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR >> {log}

            {params.exe} {input.tbl} $OUTDIR > {output.tbl} 2>> {log}
            """    

rule MGSIM_communities:
    """
    Using MGSIM to simulate communities
    """
    input:
        genomes_dir + 'genomes.tsv'
    output:
        abund = mgsim_dir + '{rep}/comm_abund.txt',
        wAbund = mgsim_dir + '{rep}/comm_wAbund.txt'
    params:
        prefix = mgsim_dir + '{rep}/comm',
        params = config['params']['MGSIM']['communities'],
        rndSeed = random.randint(10,100000)
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'MGSIM_communities/{rep}.log'
    benchmark:
        benchmark_dir + 'MGSIM_communities/{rep}.txt'
    shell:
        """       
        MGSIM communities {params.params} \
          --rnd-seed {params.rndSeed} --n-comm 1 \
          {input} {params.prefix} 2> {log} 1>&2
        """

rule MGSIM_reads:
    """
    Using MGSIM to simulate reads
    """
    input:
        wAbund = mgsim_dir + '{rep}/comm_wAbund.txt',
        tbl = genomes_dir + 'genomes.tsv',     
    output:
        done = touch(mgsim_dir + '{rep}/reads.done'),
	read1 = temp(config['tmp_dir'] + '{rep}/sim_reads/1/R1.fq'),
	read2 = temp(config['tmp_dir'] + '{rep}/sim_reads/1/R2.fq')
    params:
        out_dir = os.path.join(config['tmp_dir'], '{rep}', 'sim_reads'),
        tmp_dir = os.path.join(config['tmp_dir'], '{rep}', 'sim_reads_tmp'),
        params = config['params']['MGSIM']['reads'],
        rndSeed = random.randint(10,100000)
    conda:
        '../envs/MGSIM.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 + (60 * 24),
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 4
    log:
        log_dir + 'MGSIM_reads/{rep}.log'
    benchmark:
        benchmark_dir + 'MGSIM_reads/{rep}.txt'
    shell:
        """
        MGSIM reads {params.params} -n {threads} \
          --rndSeed {params.rndSeed} \
          --tmp-dir {params.tmp_dir} \
          {input.tbl} {input.wAbund} {params.out_dir} \
          2> {log} 1>&2
        """

rule MGSIM_compress_read1:
    """
    Compressing reads
    """
    input:
        config['tmp_dir'] + '{rep}/sim_reads/1/R1.fq'
    output:
        mgsim_dir + 'sim_reads/{rep}/Read1.fq.gz'
    log:
        log_dir + 'MGSIM_compress_read1/{rep}.log'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """

rule MGSIM_compress_read2:
    """
    Compressing reads
    """
    input:
        config['tmp_dir'] + '{rep}/sim_reads/1/R2.fq'
    output:
        mgsim_dir + 'sim_reads/{rep}/Read2.fq.gz'
    log:
        log_dir + 'MGSIM_compress_read2/{rep}.log'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """

