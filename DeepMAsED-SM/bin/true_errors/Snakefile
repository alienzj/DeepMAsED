import os
import pandas as pd


def get_ref_genomes(wildcards):
    # simulated metagenome community
    wAbund = os.path.join(mgsim_dir, wildcards[0], 'comm_wAbund.txt')
    wAbund = pd.read_csv(wAbund, sep='\t')
    # genome fasta files
    fna = config['genomes_tbl']
    # inner join & return
    return pd.merge(wAbund, fna, on='Taxon', how='inner')['Fasta'].tolist()

rule combine_ref_genomes:
    """
    Combining reference genomes.
    Only using those included in the metagenome community
    """
    input:
        fna = config['genomes_file'],
        comm = mgsim_dir + '{rep}/comm_wAbund.txt' 
    output:
        temp(config['tmp_dir'] + '{rep}/refs/ref_genomes.fna')
    params:
        exe = config['pipeline']['script_folder'] + 'concat_ref_genomes.py',
	genomes_dir = genomes_dir
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'combine_ref_genomes/{rep}.log'
    benchmark:
        benchmark_dir + 'combine_ref_genomes/{rep}.txt'
    shell:
        """
        OUTDIR=`dirname {output}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        
        {params.exe} {input.fna} \
           {input.comm} {params.genomes_dir} \
           > {output} 2>> {log}
        """

rule minimap2_contigs_vs_refs:
    """
    minimap2 mapping of contigs to ref genomes
    """
    input:
        contigs = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
        refs = config['tmp_dir'] + '{rep}/refs/ref_genomes.fna'
    output:
        aln = temp(config['tmp_dir'] + 'map/{rep}/{assembler}/minimap2_aln.paf')
    params:
        config['params']['minimap2']
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, attempt: 12,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 2
    conda:
        '../envs/quast.yaml'
    log:
        log_dir + 'minimap2/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'minimap2/{rep}/{assembler}.txt'
    shell:
        """
        echo "" > {log}
        minimap2 -t {threads} --secondary=no -c \
          {input.refs} {input.contigs} 2>> {log} | \
          sort -k 1 > {output.aln} 2>> {log}
        """

rule paf_compress:
    """
    compressing the PAF file
    """
    input:
        config['tmp_dir'] + 'map/{rep}/{assembler}/minimap2_aln.paf'
    output:
        true_errors_dir + '{rep}/{assembler}/minimap2_aln.paf.gz'        
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'paf_compress/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'paf_compress/{rep}/{assembler}.txt'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """

rule minimap2_contigs_vs_refs_summary:
    """
    Summarizing the PAF file generated by minimap2
    """
    input:
        aln = config['tmp_dir'] + 'map/{rep}/{assembler}/minimap2_aln.paf'
    output:
        true_errors_dir + '{rep}/{assembler}/minimap2_aln_summary.tsv'
    params:
        exe = config['pipeline']['script_folder'] + 'paf_summarize.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'minimap2_contigs_vs_refs_summary/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'minimap2_contigs_vs_refs_summary/{rep}/{assembler}.txt'
    shell:
        """
        {params.exe} {input.aln} > {output} 2> {log}
        """

rule metaquast:
    """
    MetaQUAST assessment of assemblies
    """
    input:
        contigs = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
        refs = genomes_dir + 'genomes.tsv',
	read1 = config['tmp_dir'] + '{rep}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{rep}/sim_reads/1/R2.fq'
    output:
        info = true_errors_dir + '{rep}/{assembler}/combined_reference/contigs_reports/contigs_report_contigs_filtered.mis_contigs.info',
        done = touch(true_errors_dir + '{rep}/{assembler}/metaquast.done')
    params:
        config['params']['metaquast']
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 24,
        n = lambda wildcards, attempt: 12,
        mem_gb_pt = lambda wildcards, attempt: int(attempt ** 2.6 + 4)
    conda:
        '../envs/quast.yaml'	
    log:
        log_dir + 'metaquast/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'metaquast/{rep}/{assembler}.txt'
    shell:
        """
        # params
        OUTDIR=`dirname {output.done}`
	REFDIR=`dirname {input.refs}`
        # removing existing metaquast output
        rm -rf $OUTDIR"/combined_reference/" 2> {log}        
        rm -rf $OUTDIR"/runs_per_reference/" 2>> {log}
        # metaquast run
        metaquast.py {params} -t {threads} \
          --reads1 {input.read1} --reads2 {input.read2} \
          -o $OUTDIR -r $REFDIR \
          {input.contigs} 2>> {log} 1>&2
        """
 
rule metaquast_mis_summary_table:
    """
    Create a table of MetaQUAST-identified misassemblies for each 'bad' contig
    """
    input:
        true_errors_dir + '{rep}/{assembler}/combined_reference/contigs_reports/contigs_report_contigs_filtered.mis_contigs.info'
    output:
        true_errors_dir + '{rep}/{assembler}/combined_reference/contigs_report_contigs_filtered.mis_contigs.tsv'
    params:
        exe = config['pipeline']['script_folder'] + 'metaquast_misass_report_parse.py'
    log:
        log_dir + 'metaquast_mis_summary_table/{rep}/{assembler}.log'
    shell:
        """
        {params.exe} {input} > {output} 2> {log}
        """