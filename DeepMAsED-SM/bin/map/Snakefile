rule map_bowtie2_build:
    """
    Building bowtie2 index for metagenome assembly contigs
    """
    input:
        contigs = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta'
    output:
        touch(asmbl_dir + '{rep}/{assembler}/map_bowtie2_build.done')
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 59,
        n = lambda wildcards, attempt: 12,
	mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 1
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'map_bowtie2_build/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map_bowtie2_build/{rep}/{assembler}.log'
    shell:
        """
	PREF=`echo {input.contigs} | perl -pe 's/\.[^.]+$//'`

        bowtie2-build --threads {threads} \
          {input} $PREF 2> {log} 1>&2
        """

rule map_bowtie2:
    """
    Mapping reads from all samples to the metagenome assembly contigs
    """
    input:
        ref = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
	done = asmbl_dir + '{rep}/{assembler}/map_bowtie2_build.done',
	read1 = config['tmp_dir'] + '{rep}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{rep}/sim_reads/1/R2.fq'
    output:
        bam = map_dir + '{rep}/{assembler}.bam'
    params:
        samtools = config['params']['samtools']
    conda:
        '../envs/bowtie2.yaml'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 59 * 12,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 2
    log:
        bt2 = log_dir + 'map_bowtie2/{rep}/{assembler}.log',    
        sam = log_dir + 'map_bowtie2_samtools/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map_bowtie2/{rep}/{assembler}.txt'
    shell:
        """
        rm -f {log.sam}

	PREF=`echo {input.ref} | perl -pe 's/\.[^.]+$//'`
        TMPDIR=`dirname {output.bam}`
 
        bowtie2 -p {threads} -q --no-unal \
          -x $PREF -1 {input.read1} -2 {input.read2} 2> {log.bt2} | \
          samtools view {params.samtools} -h -o - 2>> {log.sam}| \
          samtools sort -@ {threads} -T $TMPDIR -o - \
          > {output.bam} 2>> {log.sam}
        """

rule map_bowtie2_index_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = map_dir + '{rep}/{assembler}.bam'
    output:
        bai = map_dir + '{rep}/{assembler}.bam.bai'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'map_bowtie2_index_bam/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map_bowtie2_index_bam/{rep}/{assembler}.txt'
    shell:
        """
        samtools index -@ {threads} {input.bam} 2> {log}
        """

rule samtools_faidx:
    """
    Running samtools faidx on contigs (indexing)
    """
    input:
        asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta'
    output:
        temp(asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta.fai')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'samtools_faidx/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'samtools_faidx/{rep}/{assembler}.txt'
    shell:
        """
        samtools faidx {input} 2> {log} 1>&2
        """

rule bam_to_DL_features:
    """
    Converting bam to features
    """
    input:
        fasta = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
	fai = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta.fai',
        bam = map_dir + '{rep}/{assembler}.bam',
        bai = map_dir + '{rep}/{assembler}.bam.bai'
    output:
        temp(config['tmp_dir'] + 'feats/{rep}/{assembler}/features.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'bam2feat.py',
        assembler = lambda wildcards: wildcards.assembler,
	tmp_db = '/var/sge_tmp.$JOB_ID.0/'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 8,
        mem_gb_pt = lambda wildcards, attempt: int(round(attempt ** 2.5 * 2 + 1, 0))
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'bam_to_DL_features/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'bam_to_DL_features/{rep}/{assembler}.txt'
    shell:
        """
        {params.exe} -p {threads} -a {params.assembler} \
          {input.bam} {input.fasta} > {output} 2>> {log}
        """

rule feature_true_est_join:
    """
    Joining 'true' contig assembly info with the bam-generated feature table
    """
    input:
        feats = config['tmp_dir'] + 'feats/{rep}/{assembler}/features.tsv',
        err = true_errors_dir + '{rep}/{assembler}/minimap2_aln_summary.tsv'
    output:
        temp(config['tmp_dir'] + 'feats/{rep}/{assembler}/features_j.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'table_join.R'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 15
    conda:
        '../envs/R.yaml'
    log:
        log_dir + 'feature_true_est_join/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'feature_true_est_join/{rep}/{assembler}.txt'
    shell:
        """
        {params.exe} -x contig -y query -o {output} \
          {input.feats} {input.err} 2> {log} 1>&2
        """

rule feature_metaquast_summary_join:
    """
    Joining metaquast mis-assembly summary info with the bam-generated feature table
    """
    input:
        tbl = config['tmp_dir'] + 'feats/{rep}/{assembler}/features_j.tsv',
        mis = true_errors_dir + '{rep}/{assembler}/combined_reference/contigs_report_contigs_filtered.mis_contigs.tsv'
    output:
        temp(config['tmp_dir'] + 'feats/{rep}/{assembler}/features_j_j.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'table_join.R'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 12
    conda:
        '../envs/R.yaml'
    log:
        log_dir + 'feature_true_est_join/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'feature_true_est_join/{rep}/{assembler}.txt'
    shell:
        """
        {params.exe} -x contig -y Contig -o {output} \
          {input.tbl} {input.mis} 2> {log} 1>&2
        """

rule features_compress:
    """
    Compressing table
    """
    input:
        config['tmp_dir'] + 'feats/{rep}/{assembler}/features_j_j.tsv'
    output:
        map_dir + '{rep}/{assembler}/features.tsv.gz'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 8
    log:
        log_dir + 'features_compress/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'features_compress/{rep}/{assembler}.txt'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """


# rule samtools_mpileup:
#     """
#     Calling samtools mpileup on each bam
#     """
#     input:
#         bam = map_dir + '{rep}/{assembler}.bam',
#         bai = map_dir + '{rep}/{assembler}.bam.bai',
#         ref = asmbl_dir + '{rep}/{assembler}/contigs.fasta',
#         ref_fai = asmbl_dir + '{rep}/{assembler}/contigs.fasta.fai'
#     output:
#         map_dir + '{rep}/{assembler}_mpileup.tsv.gz'
#     params:
#         config['params']['mpileup']
#     resources:
#         time = lambda wildcards, attempt: attempt ** 3 * 59,
#         mem_gb_pt = lambda wildcards, attempt: attempt * 12
#     conda:
#         '../envs/bowtie2.yaml'
#     log:
#         log_dir + 'map_bowtie2_index_bam/{rep}/{assembler}.log'
#     benchmark:
#         benchmark_dir + 'map_bowtie2_index_bam/{rep}/{assembler}.txt'
#     shell:
#         """
#         echo "" > {log}
#         samtools mpileup {params} -s -aa -f {input.ref} {input.bam} 2>> {log} | gzip > {output} 2>> {log}
#         """
