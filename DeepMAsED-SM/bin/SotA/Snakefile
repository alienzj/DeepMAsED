rule ALE:
    """
    Running ALE on assemblies
    """
    input:
        ref = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
        bam = map_dir + '{rep}/{assembler}.bam',
        bai = map_dir + '{rep}/{assembler}.bam.bai'
    output:
        txt = ale_dir + '{rep}/{assembler}/ALE_results.txt'
    params:
        params = config['params']['ALE'],
        exe = config['pipeline']['script_folder'] + 'ALE'
    resources:
        time = lambda wildcards, attempt: attempt * 59 * 12,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 7
    log:
        log_dir + 'ALE/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'ALE/{rep}/{assembler}.txt'
    shell:
        """
        {params.exe} {params.params} {input.bam} {input.ref} {output.txt} 2> {log}
        """

rule VALET:
    """
    Running VALET on assemblies
    """
    input:
        ref = asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
	read1 = config['tmp_dir'] + '{rep}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{rep}/sim_reads/1/R2.fq'
    output:
        valet_dir + '{rep}/{assembler}/valet_out/reference/summary.tsv'
    params:
        params = config['params']['VALET']
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 12,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 2
    conda:
        '../envs/valet.yaml'
    log:
        log_dir + 'VALET/{rep}/{assembler}.log'
    benchmark:
        benchmark_dir + 'VALET/{rep}/{assembler}.txt'
    shell:
        """
        OUTDIR=`dirname {output}`
        OUTDIR=`dirname $OUTDIR`
        rm -rf $OUTDIR

        valet.py --threads {threads} \
          --assembly-names reference \
          --skip-reapr {params.params} \
          --output-dir $OUTDIR -a {input.ref} \
          -1 {input.read1} -2 {input.read2} \
          2> {log}        
        """
