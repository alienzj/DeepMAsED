# import 
from __future__ import print_function
import os
import re
import sys
import getpass
import socket
import pandas as pd
import random

# setup
## config
configfile: 'config.yaml'
## random seed
random.seed(config['pipeline']['rnd_seed'])
## dirs 
snake_dir = config['pipeline']['snakemake_folder']
include: snake_dir + 'bin/dirs'

## load 
### temp_folder
config['pipeline']['username'] = getpass.getuser()
config['pipeline']['email'] = config['pipeline']['username'] + '@tuebingen.mpg.de'
config['pipeline']['temp_folder'] = os.path.join(config['pipeline']['temp_folder'],
                                                 config['pipeline']['username'])
### genomes file
config['genomes_tbl'] = pd.read_csv(config['genomes_file'], sep='\t', comment='#')
#### Taxon
for x in ['Taxon']:
    if x not in config['genomes_tbl'].columns:
        msg = 'Column "{}" not found in genomes file'
        print(msg.format(x))
        sys.exit(1)
func = lambda x: re.sub('[^A-Za-z0-9_]+', '_', x)
config['genomes_tbl']['Taxon'] = config['genomes_tbl']['Taxon'].apply(func)
#### Genome fasta
if 'Fasta' not in config['genomes_tbl'].columns:
    F = lambda x: os.path.join(genomes_dir, x + '.fna')
    config['genomes_tbl']['Fasta'] = config['genomes_tbl']['Taxon'].apply(F)
else:
    config['params']['MGSIM']['genome_download'] = 'Skip'
#### Sample metagenome
if 'Sample' in config['genomes_tbl'].columns:
    if 'Read1' not in config['genomes_tbl'].columns:
        raise IOError('"Read1" column not found in input table!')
    if 'Read2' not in config['genomes_tbl'].columns:
        sys.stderr.write('WARNING: no "Read2" column in the input table!\n')
    config['just_features'] = True
else:
    config['just_features'] = False

## output directories
config['output_dir'] = config['output_dir'].rstrip('/') + '/'
config['tmp_dir'] = os.path.join(config['pipeline']['temp_folder'],
		                 'DeepMAsED_' + str(os.stat('.').st_ino) + '/')
if not os.path.isdir(config['tmp_dir']):
    os.makedirs(config['tmp_dir'])
print('\33[33mUsing temporary directory: {} \x1b[0m'.format(config['tmp_dir']))

# config calculated parameters
if config['just_features']:
    config['taxa_unique'] = config['genomes_tbl'].Taxon.unique().tolist()
    config['samples_unique'] = config['genomes_tbl'].Sample.unique().tolist()    
else:
    config['reps'] = [x+1 for x in range(config['params']['reps'])]
    config['assemblers'] = [k for k,v in config['params']['assemblers'].items() if not v.startswith('Skip')]

## modular snakefiles
include: snake_dir + 'bin/Snakefile'
if config['just_features']:
    include: snake_dir + 'bin/gs_map/Snakefile'
else:
    include: snake_dir + 'bin/MGSIM/Snakefile'
    include: snake_dir + 'bin/coverage/Snakefile'
    include: snake_dir + 'bin/assembly/Snakefile'
    include: snake_dir + 'bin/true_errors/Snakefile'
    include: snake_dir + 'bin/map/Snakefile'
    include: snake_dir + 'bin/SotA/Snakefile'


def all_feat_tables(genomes_tbl):
    out_files = []
    for i,x in genomes_tbl.iterrows():
        f = '{genome}/{sample}/features.tsv.gz'
	f = f.format(genome=x['Taxon'], sample=x['Sample'])
	f = map_dir + f
	out_files.append(f)
    return out_files

def all_which_input(wildcards):
    input_files = []

    if config['just_features']:
        # feature table
        input_files += all_feat_tables(config['genomes_tbl'])
    else:
        # reads
        if config['params']['keep_reads'] == True:
            x = expand(mgsim_dir + 'sim_reads/{rep}/Read1.fq.gz',
                       rep = config['reps'])
            input_files += x
            x = expand(mgsim_dir + 'sim_reads/{rep}/Read2.fq.gz',
                       rep = config['reps'])
            input_files += x
        # coverage
        if not config['params']['nonpareil'].startswith('Skip'):
            x = expand(coverage_dir + '{rep}/nonpareil.npo',
                       rep = config['reps'])
            input_files += x
            if not config['params']['nonpareil_summary'].startswith('Skip'):
                input_files.append(coverage_dir + 'nonpareil/all_summary.RDS')
                input_files.append(coverage_dir + 'nonpareil/all_summary.txt')
                input_files.append(coverage_dir + 'nonpareil/all_curve.pdf')
    
        # MG assemblies
        x = expand(asmbl_dir + '{rep}/{assembler}/contigs_filtered.fasta',
                   rep = config['reps'],
                   assembler = config['assemblers'])
        input_files += x
    
        # true mis-assemblies
        ## minimap2
        x = expand(true_errors_dir + '{rep}/{assembler}/minimap2_aln.paf.gz',
    	       rep = config['reps'],
    	       assembler = config['assemblers'])
        input_files += x
    
        x = expand(true_errors_dir + '{rep}/{assembler}/minimap2_aln_summary.tsv',
    	       rep = config['reps'],
    	       assembler = config['assemblers'])
        input_files += x
    
        ## metaquast
        x = expand(true_errors_dir + '{rep}/{assembler}/metaquast.done',
    	       rep = config['reps'],
    	       assembler = config['assemblers'])
        input_files += x
    
        # read mapping to contigs
        x = expand(map_dir + '{rep}/{assembler}.bam.bai',
    	       rep = config['reps'],
    	       assembler = config['assemblers'])
        input_files += x
    
        # feature table
        x = expand(map_dir + '{rep}/{assembler}/features.tsv.gz',
    	       rep = config['reps'],
    	       assembler = config['assemblers'])
        input_files += x

        # State of the Art
	## ALE
        if not config['params']['ALE'].startswith('Skip'):
            x = expand(ale_dir + '{rep}/{assembler}/ALE_results.txt',
    		       rep = config['reps'],
    	               assembler = config['assemblers'])
            input_files += x
	## VALET
        if not config['params']['VALET'].startswith('Skip'):
            x = expand(valet_dir + '{rep}/{assembler}/summary.tsv',
    		       rep = config['reps'],
    	               assembler = config['assemblers'])
            input_files += x

    return input_files


localrules: all

rule all:
    input:
        all_which_input

