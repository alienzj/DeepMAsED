import os
import pandas as pd

if not config['params']['MGSIM']['genome_download'].startswith('Skip'):
    localrules: MGSIM_genome_download
    
    rule MGSIM_genome_download:
        """
        Using MGSIM to download the genomes
        """
        input:
            tbl = config['genomes_file']
        output:
            tbl = genomes_dir + 'genomes.tsv',
            fna = config['genomes_tbl']['Fasta']
        params:
            config['params']['MGSIM']['genome_download']
        conda:
            '../envs/MGSIM.yaml'
        threads:
            12
        log:
            log_dir + 'MGSIM_download/all.log'
        shell:
            """
            OUTDIR=`dirname {output.tbl}`
            if [ ! -d $OUTDIR ]; then
              mkdir -p $OUTDIR
            fi

            MGSIM genome_download {params} \
              -n {threads} -d $OUTDIR -r \
              {input.tbl} > {output.tbl} 2> {log}
            """

rule MGSIM_communities:
    """
    Using MGSIM to simulate communities
    """
    input:
        tbl = genomes_dir + 'genomes.tsv',
        fna = config['genomes_tbl']['Fasta']
    output:
        abund = mgsim_dir + '{rep}/comm_abund.txt',
        wAbund = mgsim_dir + '{rep}/comm_wAbund.txt'
    params:
        prefix = mgsim_dir + '{rep}/comm',
        params = config['params']['MGSIM']['communities']
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + '{rep}/MGSIM_communities/all.log'
    shell:
        """       
        MGSIM communities {params.params} --n-comm 1 \
          {input.tbl} {params.prefix} 2> {log} 1>&2
        """

rule MGSIM_reads:
    """
    Using MGSIM to simulate reads
    """
    input:
        wAbund = mgsim_dir + '{rep}/comm_wAbund.txt',
        tbl = genomes_dir + 'genomes.tsv',     
    output:
        done = touch(mgsim_dir + '{rep}/reads.done'),
	read1 = mgsim_dir + '{rep}/1/R1.fq',
	read2 = mgsim_dir + '{rep}/1/R2.fq'	
    params:
        tmp_dir = os.path.join(config['tmp_dir'], '{rep}'),
	out_dir = os.path.join(mgsim_dir, '{rep}'),
        params = config['params']['MGSIM']['reads']
    conda:
        '../envs/MGSIM.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, attempt: 8,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    log:
        log_dir + 'MGSIM_reads/{rep}.log'
    benchmark:
        benchmark_dir + 'MGSIM_reads/{rep}.txt'
    shell:
        """
        MGSIM reads {params.params} -n {threads} \
          --tmp-dir {params.tmp_dir} \
          {input.tbl} {input.wAbund} {params.out_dir} \
          2> {log} 1>&2
        """
