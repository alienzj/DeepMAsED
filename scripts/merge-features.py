#!/usr/bin/env python
from __future__ import print_function
import sys,os
import gzip
import argparse
import logging
import glob
import numpy as np
import functools
import multiprocessing as mp

desc = 'Summarize feature tables'
epi = """DESCRIPTION:
For >= 1 feature table, getting the
contig-level info (eg., mis-assembly labels).

The output tsv table written to STDOUT.
"""
parser = argparse.ArgumentParser(description=desc,
                                 epilog=epi,
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('map_dir', metavar='map_dir', type=str, 
                    help='Path to DeepMAsED-SM "true_errors" output directory')
parser.add_argument('-s', '--suffix', type=str, default='features.tsv.gz',
                    help='Feature file name suffix (default: %(default)s)')
parser.add_argument('-p', '--nprocs', type=int, default=1,
                    help='Number of parallel processes (default: %(default)s)')
parser.add_argument('--version', action='version', version='0.0.1')

logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.DEBUG)


def read_table(in_file):
    """ Reading table and pulling out per-contig info (no per-bp info) """
    logging.info('Processing file: {}'.format(in_file))
    
    x = os.path.split(in_file)[0]
    asmbl = os.path.split(x)[1]
    sim_rep = os.path.split(os.path.split(x)[0])[1]

    if in_file.endswith('.gz'):
        _open = lambda x: gzip.open(x, 'rb')
    else:
        _open = lambda x: open(x, 'r')

    contig_info = {}
    with _open(in_file) as inF:
        for i,line in enumerate(inF):
            if i == 0:
                continue
            if in_file.endswith('.gz'):
                line = line.decode('utf-8')
            line = line.rstrip().split('\t')
            try:
                float(line[-1])
                line += ['None']
            except ValueError:
                pass
            try:
                contig_info[line[0]] = [line[2]] + line[-6:]
            except KeyError:
                contig_info[line[0]] = [line[2]] + line[-6:]
                
    return [asmbl, sim_rep], contig_info            
    
def list_feat_files(map_dir, suffix):
    """ Listing feature files generated by DeepMAsED-SM """
    P = os.path.join(map_dir, '*', '*', '*' + suffix)
    feat_files = glob.glob(P)
    if len(feat_files) < 1:
        msg = 'No feature files files with suffix "{}" in path: {}'
        raise IOError(msg.format(suffix, P))
    else:
        msg = 'Number of feature files found: {}'
        logging.info(msg.format(len(feat_files)))
    return feat_files

def main(args):
    # listing feature files
    feat_files = list_feat_files(args.map_dir, args.suffix)

    # reading tables
    if args.nprocs > 1:
        pool = mp.Pool(args.nprocs)
        contig_info = pool.map(read_table, feat_files)
    else:
        contig_info = [read_table(x) for x in feat_files]

    # writing output
    header = ['assembler', 'sim_rep', 'contig_name', 'contig_length',
              'chimeric', 'num_hits', 'query_hit_len',
              'edit_dist', 'edit_dist_norm', 'Extensive_misassembly']
    print('\t'.join(header))
    for x in contig_info:
        for contig,v in x[1].items():
            print('\t'.join(x[0] + [contig] + v))
    
                        
if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
